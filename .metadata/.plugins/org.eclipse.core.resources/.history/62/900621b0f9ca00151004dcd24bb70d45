/**
 * Created by hadoop on 2/3/16.
 */

import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.ArrayWritable;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class query3 {

    public static class CustomerMapper
            extends Mapper<Object, Text, Text, Text> {

        private final static String prefix = "C~";

        @Override
        public void map(Object key, Text value, Context context
        ) throws IOException, InterruptedException {
            String[] record = value.toString().split(",", 2);
            Text cID = new Text(record[0]);
            record[1] = prefix+record[1];
            context.write(cID, new Text(record[1]));
        }
    }

    public static class TransactionMapper
            extends Mapper<Object, Text, Text, Text> {

        private final static String prefix = "T~";

        @Override
        public void map(Object key, Text value, Context context)
            throws IOException, InterruptedException {
            String[] record = value.toString().split(",", 3);
            Text cID = new Text(record[1]);
            record[2] = prefix+record[2];
            context.write(cID, new Text(record[2]));
        }
    }

    public static class CTReducer
            extends Reducer<Text, Text, Text, Text> {

        private String customers = new String();


        @Override
        public void reduce(Text key, Iterable<Text> values,
                           Context context
        ) throws IOException, InterruptedException {

            List<String> transaction = new ArrayList<>();

            for (Text record: values) {
                String[] temp = record.toString().split("~");
                if (temp[0].equals("C")) {
                    customers = temp[1].split(",")[0]+","+temp[1].split(",")[3];
                }
                else {
                    transaction.add(temp[1].split(",")[0]+","+temp[1].split(",")[1]);
                }
            }
            if (transaction.size() == 0) {
                String result = customers+","+"0"+","+"0"+","+"None";
                Text value = new Text(result);
                context.write(key, value);
            }
            else {
                int NoT = transaction.size();
                float TS = 0;
                int MI = Integer.MAX_VALUE;
                for (String lis: transaction) {
                    String[] all = lis.split(",");
                    TS += Float.parseFloat(all[0]);
                    if (Integer.parseInt(all[1]) < MI) {
                        MI = Integer.parseInt(all[1]);
                    }
                }
                String result = customers+","+Integer.toString(NoT)
                        +","+Float.toString(TS)+","+Integer.toString(MI);
                Text value = new Text(result);
                context.write(key, value);
            }
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        if (args.length != 3) {
            System.err.println("Usage: Query 3: join <HDFS input file1> <HDFS input file1> <HDFS output file>");
            System.exit(2);
        }
        Job job = new Job(conf, "Query 3");
        job.setJarByClass(query3.class);
        // job.setMapperClass(CustomerMapper.class);
        MultipleInputs.addInputPath(job, new Path(args[0]), TextInputFormat.class, CustomerMapper.class);
        MultipleInputs.addInputPath(job, new Path(args[1]), TextInputFormat.class, TransactionMapper.class);
        job.setReducerClass(CTReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setNumReduceTasks(5);
        job.setOutputValueClass(Text.class);
        //FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[2]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}