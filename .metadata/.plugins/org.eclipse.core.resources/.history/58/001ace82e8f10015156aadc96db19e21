package hw4;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class SpacialJoin {
	public static class regMapper
		extends Mapper<Object, Text, Text, Text>{
	
	private Text ID = new Text();
	private Text num = new Text();
	
	public void map(Object key, Text value, Context context
			)throws IOException, InterruptedException{
		StringTokenizer itr = new StringTokenizer(value.toString());
		while(itr.hasMoreTokens()){
			String records = itr.nextToken();
			String[] sep = records.split(",");
			ID.set(sep[1]);			// ID (key)
			num.set("1 "+sep[2]);    // num, tranNum(value)
			context.write(ID, num);
		}
	}
	
	} //mapper finish
	
	//Reducer
	public static class outReducer
		extends Reducer<Text, Text, Text, Text>{
	
	private Text result = new Text();
	
	public void reduce(Text key, Iterable<Text> value, Context context
			)throws IOException, InterruptedException{
		int sum = 0;
		float totalnum = 0;
		for(Text val: value){
			String[] sep = val.toString().split(" ");
			sum += Integer.parseInt(sep[0]);
			totalnum += Float.parseFloat(sep[1]);
		}
		result.set(Integer.toString(sum)+" "+Float.toString(totalnum));
		context.write(key, result);
	}
	} //reducer finish
	
	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException{
		Configuration conf = new Configuration();
		if(args.length!=2){
			System.err.println("Wrong ussage");
			System.exit(2);
		}
		
		Job job = new Job(conf, "SpacialJoin");
		job.setJarByClass(SpacialJoin.class);
		job.setMapperClass(regMapper.class);
		job.setCombinerClass(outReducer.class);
		job.setReducerClass(outReducer.class);
		job.setNumReduceTasks(2);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		System.exit(job.waitForCompletion(true)? 0:1);
	}
}
