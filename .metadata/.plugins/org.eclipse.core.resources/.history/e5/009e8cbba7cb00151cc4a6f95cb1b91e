package project1;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.jobcontrol.JobControl;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.jobcontrol.ControlledJob;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;


public class Query5 extends Configured implements Tool {
	
	
	
	public static class JoinMapper
			extends Mapper<Object, Text, Text, IntWritable>{
		//Save records for Customers relation
		private HashMap<String, String> customerMap = new HashMap<String, String>();
		private Text ID = new Text();
		private final static IntWritable one = new IntWritable(1);
	
		//Read Customers.csv file into DistributedCache for map-side join
		@Override
		protected void setup(Context context
				) throws IOException, InterruptedException{
			BufferedReader bf = null;
			Path[] paths = DistributedCache.getLocalCacheFiles(context.getConfiguration());
			String line = "";
			
			for(Path path: paths){
				if(path.toString().contains("Customers")){
					bf = new BufferedReader(new FileReader(path.toString()));
					while((line=bf.readLine())!=null){
						// save to HashMap
						String[] str= line.split(",", 2);
						customerMap.put(str[0], str[1]);
					}
				}
			}
			
			bf.close();
		} // finish setup
		
		public void map(Object key, Text value, Context context
				)throws IOException, InterruptedException{
			StringTokenizer itr = new StringTokenizer(value.toString());
			while(itr.hasMoreTokens()){
				String[] recordT = itr.nextToken().toString().split(",");
				String[] recordC = customerMap.get(recordT[1]).split(",");
				// (ID name) as key
				ID.set(recordT[1]+" "+recordC[0]);
				//  #transaction as value
				context.write(ID, one);
			}
		}
	
	}// finish mapper
	
	public static class sumReducer 
			extends Reducer<Text, IntWritable, Text, IntWritable>{
		
		public void reduce(Text key, Iterable<IntWritable> value, Context context
				) throws IOException, InterruptedException{
			int sum = 0;	//#transacion
			for(IntWritable val:value){
				sum += val.get();
			}
			IntWritable sum_ = new IntWritable(sum);
			context.write(key, sum_);
		}
	}// finish reducer(job 1) get id name #transaction
	
	public static class mapper2
			extends Mapper<Object, Text, Text, Text>{
		private Text one = new Text();
		private Text pair = new Text();
		
		public void map(Object key, Text value, Context context
				) throws IOException, InterruptedException{
			one.set("1");
			pair.set(value.toString());
			System.out.println(value.toString());
			context.write(one, pair);
		}
	} // finish mapper(job 2)
	
	public static class reducer2
			extends Reducer<Text, Text, Text, Text>{
		
		public void reduce(Text key, Iterable<Text> value, Context context
				) throws IOException, InterruptedException{
			HashMap<Integer, ArrayList<String>> hash = new HashMap<Integer, ArrayList<String>>();
			
			int min = Integer.MAX_VALUE;
			for(Text val:value){
				String[] str = val.toString().split("\t");
				int total = Integer.parseInt(str[1]);
				if(total<=min){
					if(hash.containsKey(total)){
						hash.get(total).add(str[0]);
					}else{
						hash.put(total, new ArrayList<String>(Arrays.asList(str[0])));
					}
					min = total;
				}
			}
			Text id = new Text(), MIN = new Text();
			MIN.set(Integer.toString(min));
			for(String str: hash.get(min)){
				id.set(str);
				context.write(id, MIN);
			}
		}
	}
	
	@Override
	public int run(String[] arg0) throws Exception {
		Configuration conf = new Configuration();
		Job job = new Job(conf, "Query5");
		job.setJarByClass(Query5.class);
		job.setMapperClass(JoinMapper.class);
		job.setReducerClass(sumReducer.class);
		//job.setNumReduceTasks(2);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		DistributedCache.addCacheFile(new Path(arg0[0]).toUri(), job
                .getConfiguration());
		
		ControlledJob ctrljob1 = new ControlledJob(conf);
		ctrljob1.setJob(job);
		FileInputFormat.addInputPath(job, new Path(arg0[1]));
		FileOutputFormat.setOutputPath(job, new Path(arg0[2])); //job 1
		
		//job 2
		Job job2 = new Job(conf, "job2");
		job2.setJarByClass(Query5.class);
		job2.setMapperClass(mapper2.class);
		job2.setReducerClass(reducer2.class);
		//job2.setNumReduceTasks(2);
		job2.setOutputKeyClass(Text.class);
		job2.setOutputValueClass(Text.class);
		
		ControlledJob ctrljob2 = new ControlledJob(conf);
		ctrljob2.setJob(job2);
		ctrljob2.addDependingJob(ctrljob1);
		
		FileInputFormat.addInputPath(job2, new Path(arg0[2]));
		FileOutputFormat.setOutputPath(job2, new Path(arg0[3]));
		
		//main controll
		JobControl jobctrl = new JobControl("myControl");
		jobctrl.addJob(ctrljob1);
		jobctrl.addJob(ctrljob2);
		
		Thread t = new Thread(jobctrl);
		t.start();
		
		while(!jobctrl.allFinished()){
			t.sleep(500);
		}
		
		jobctrl.stop();
		return 0;
	}
	
	public static void main(String[] args) throws Exception{
		int res = ToolRunner.run(new Configuration(), new Query5(),
                args);
        System.exit(res);
	}
}