package hw4;

import java.io.IOException;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class Kmeans extends Configured implements Tool {

	
	public static class classifyMapper 
			extends Mapper<Object, Text, Text, Text>{
		private static Log log = LogFactory.getLog(classifyMapper.class);
		private static int k = 6;
		private float[] center_x = new float[k];
		private float[] center_y = new float[k];
		
		@Override
		protected void setup(Context context
				)throws IOException, InterruptedException{
			Path[] caches = DistributedCache.getLocalCacheFiles(context.getConfiguration());
			if(caches==null || caches.length<=0){
				log.error("no cache file");
				System.exit(1);
			}
			
			BufferedReader br = new BufferedReader(new FileReader(caches[0].toString()));
			String line = "";
			while((line=br.readLine())==null){
				String[] str = line.split("\t");
				int i = Integer.parseInt(str[0]);
				float x = Float.parseFloat(str[1]);
				float y = Float.parseFloat(str[2]);
				this.center_x[i] = x;
				this.center_y[i] = y;
			}
			br.close();
		}
		
		public void map(Object key, Text value, Context context
				)throws IOException, InterruptedException{
			StringTokenizer itr = new StringTokenizer(value.toString());
			while(itr.hasMoreTokens()){
				String[] point = itr.nextToken().split(",");
				float point_x = Float.parseFloat(point[1]);
				float point_y = Float.parseFloat(point[2]);
				float min = Float.MAX_VALUE;
				int cl = 0;
				for(int i=1;i<=k;i++){
					float dist = (point_x-center_x[i])*(point_x-center_x[i])+(point_y-center_y[i])*(point_y-center_y[i]);
					if(dist < min){
						min = dist;
						cl = i;
					}
				}
				Text cl_ = new Text();
				Text point_ = new Text();
				cl_.set(Integer.toString(cl));
				point_.set(point[1]+','+point[2]);
				context.write(cl_, point_);
			}
		}
		
	}//finish mapper
	
	public static class centerReducer
			extends Reducer<Text, Text, Text, Text>{
		public void reduce(Text key, Iterable<Text> value, Context context
				)throws IOException, InterruptedException{
			float sum_x = 0;
			float sum_y = 0;
			int count = 0;
			for(Text val:value){
				String[] str = val.toString().split(",");
				sum_x += Float.parseFloat(str[0]);
				sum_y += Float.parseFloat(str[1]);
				count++;
			}
			float avg_x = sum_x/count;
			float avg_y = sum_y/count;
			context.write(key, new Text(Float.toString(avg_x)+'\t'+Float.toString(avg_y)));
		}
		
	}//finish reducer
}
